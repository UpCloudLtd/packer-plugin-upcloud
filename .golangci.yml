#
# UpCloud golangci-lint configuration
#

version: "2"

run:
  #
  # The default timeout of 1 minute is on the low side for larger
  # projects/slower runners/non-cached scenarios. Bump it generously
  # to effectively disable under normal circumstances, while leaving
  # _some_ limit in place for oddball cases.
  #
  timeout: 30m

#
# Run `golangci-lint help formatters` and `golangci-lint help linters`
# or see https://golangci-lint.run/usage/formatters/ and
# https://golangci-lint.run/usage/formatters/ for a list of all formatters
# and linters. This config was last updated for v2.1.5.
#
# Please keep the lists sorted alphabetically.
#
# Key:
#   #: Transitionally disabled or optional, possibly to be enabled
#  ##: Permanently, intentionally disabled due to implementation concerns
#      or redundancy with something else that is enabled
# ###: Permanently, intentionally disabled due to deprecation
#
# If disabling a formatter or linter that is enabled in the default config
# or enabling one marked with DISABLE in it, please append a
# `# PROJECT: reasoning here` comment.
# For optionals, the comment is recommended but not required.
# Permanently disabled formatters and linters should not be enabled.
#
# Do consider inline case by case disabling of particular issues flagged
# instead of disabling something wholesale on this level.
#

formatters:
  #
  # No formatters are enabled by default, enable the ones to our liking here.
  #
  enable:
    # Control package import order and make it deterministic. Handles empty
    # lines better than `goimport` does. Gets rid of commits that change the
    # order, which would otherwise pollute commits and/or history. Autofixable.
    # Mostly redundant with `gofumpt` in basic settings, but improves on it
    # with some additional config (see below).
    # Similar: `gofumpt`, `goimports`.
    - gci

    # The ubiquitous, official Go formatter. We like to take a compatible step
    # further, and enable `gofumpt` instead, making this redundant.
    # Similar: `gofumpt`, `goimports`.
    ## - gofmt # DISABLE

    # A more opinionated superset of `gofmt`, enforcing a standard formatting
    # of code, autofixable. See the list of added rules over `go fmt` at
    # https://github.com/mvdan/gofumpt#added-rules. IDE configured to format
    # with gofumpt recommended.
    # Similar: `gofmt` + `gci`, `goimports`.
    - gofumpt

    # Does everything `gofmt` does, and additionally fixes up and formats
    # imports. Our use of `gofumpt` makes this redundant.
    # Similar: `gci`, `gofmt`, `gofumpt`.
    ## - goimports # DISABLE

    # Shorten too long lines. Likely calls for discussion before enabling.
    # See also the `lll` linter.
    # - golines # OPTIONAL

  settings:
    gci:
      sections:
        - standard # Standard section: captures all standard packages.
        - default # Default section: contains all imports that could not be matched to another section type.
        - prefix(github.com/UpCloudLtd) # Custom section: groups all imports with the specified Prefix.
        - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
        - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      custom-order: true

    gofumpt:
      extra-rules: true

linters:
  #
  # We use a custom set of linters, so disable all and enable one-by-one.
  #
  default: none
  enable:
    # Warn about slices suspiciously passed as `any` variadic arguments.
    # This is usually not the intent; contents of the slice more often is.
    - asasalint

    # Makes sure there are no non-ASCII identifiers that could be confusing or
    # hard to use.
    - asciicheck

    # Warns on "dangerous" unicode characters, in order to prevent "trojan
    # source" problems,
    # https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574.
    # While it's not that interesting for various projects, it doesn't really
    # hurt either, and the probability of false positives is very low.
    - bidichk

    # Checks that HTTP response body (a `ReadCloser`) is closed properly.
    # Somewhat chore/prone to false positives in tests.
    - bodyclose

    # Checks that HTTP headers are accessed using "canonical format" keys.
    # Note that accessing http.Header directly as a map (where/if needed,
    # as opposed to the Add/Del/Get functions) has special considerations
    # as noted in its godoc.
    # Optional and disabled by default due to lack of clear consensus.
    # - canonicalheader # OPTIONAL

    # Warns about `context.Context` members in structs, which is a "do not"
    # in the `context` docs. See also https://go.dev/blog/context-and-structs.
    # Some daemon life cycle management patterns are at odds with this.
    - containedctx

    # Checks that parent Contexts are passed on, possibly after adding to,
    # instead of being dropped or new ones created in too low level code.
    # Essentially `context.With*()` should be used for adding to existing
    # Contexts, and Contexts carried around through the whole call chain down
    # to wherever they are used. Tends to require largish refactoring in places
    # where this is not met.
    - contextcheck

    # Flags copying of loop variables that is redundant with Go >= 1.22.
    - copyloopvar

    # Checks function and package cyclomatic complexity. Could result in better
    # readable and maintainable code, but in practice seems more often to get
    # in the way, resolving flagged issues it not always a net win. Compared to
    # `gocyclo`, calculates both function and package cyclomatic complexity.
    # Similar: `gocognit`, `gocyclo`, `maintidx`.
    ## - cyclop # DISABLE

    # Encourage various rules on grouping and arranging `const`s, `var`s,
    # `type`s and `func`s, configurability per mentioned keyword; and `init`
    # func first. `init` first could be nice and differentiates this from
    # alternatives, but on the other hand has similar considerations as
    # one for single declaration requirement: it may not be desirable,
    # as e.g. higher level grouping by placing related globals and `init`,
    # functions next to their uses arguably more desirable -- then again
    # this could/should be handled by splitting to more files, and if so,
    # perhaps we should actually enable this? `gofumpt` makes the grouping
    # redundant. Enabling would call for some discussion on desired order
    # of managed types of declarations, and configuring that (does nothing
    # by default without config).
    # Similar: `gofumpt`, `grouper`.
    ## - decorder # DISABLE

    # Go linter that checks if package imports are in a list of acceptable
    # packages.
    # Similar: `gomodguard`.
    - depguard

    # Warns on too many blank receivers in an assignment, for example
    # `_, _, _, err := doSomething()`. Commonly this would indicate a potential
    # need for refactoring, if we're using a method and ignoring most of what
    # it returns. Frequently met and kind of unavoidable in some fairly rare
    # use cases, such as using `runtime.Caller` to get the current file name.
    - dogsled

    # Warns on bits of code that have long, identical series of tokens. Helps
    # with keeping code DRY which in turn helps with maintenance, readability,
    # and testability. Not always trivial to fix, needs some understanding of
    # the code in question. Refactoring these out can be prone to errors, due
    # to missing subtle differences. Good idea to enable this as early in
    # project lifecycle as possible.
    - dupl

    # Check for duplicate adjacent words in comments and strings. These are
    # almost always errors, often caused by inadvertent edits.
    - dupword

    # Checks for two durations multiplied together. Seems like this could
    # prevent potential bugs, but based on the experiences with actual code,
    # not sure how common and serious the bugs would actually be and whether it
    # actually helps or not. Code variants that pass the linter are not
    # necessarily any clearer, just different.
    ## - durationcheck # DISABLE

    # Warns about not checking errors for functions that return an error.
    # Makes it impossible for the developer to miss an error being returned, as
    # all errors need either to be checked or `//nolint`ed. A bit of a chore in
    # tests, in particular, where there are sometimes places where one might not
    # really care about errors (e.g. crashing would be ok). However, seems like
    # a small price to pay for the upside.
    - errcheck

    # Specialized linter for JSON error checks. Contains smarts to not require
    # error handling for marshaling operations that "cannot" return an error.
    # However there are some doubts about this, including whether/how
    # exhaustive it is, how futureproof regarding Go versions it is, and
    # stopping using this linter would place us at risk unless something else
    # would cover for its fallout. Ignoring errors is also a bad general
    # practice, which could spread. The default config in golangci-lint is good
    # and conservative, "cannot happen" error flagging is not enabled.
    - errchkjson

    # Verifies consistent naming for error types (`type FooError ...`) and
    # sentinels (`var ErrFoo = errors.New(...)`), as used in stdlib and
    # described in the conventions, see
    # https://github.com/golang/go/wiki/Errors#naming.
    - errname

    # Promotes use of the stdlib error handling primitives (`errors.Is`,
    # `errors.As`, `%w` in `fmt.Errorf`, etc). Somewhat at odds with codebases
    # using `pkg/errors`, but those are generally moving towards stdlib.
    - errorlint

    # Checks that switches of enum(-like) types cover every possible case.
    # Very helpful when we need to add new cases to enums, making sure that all
    # the relevant bits are checked. Can become annoying if there's a _lot_ of
    # possible cases, for example with `reflect.Kind`.
    - exhaustive

    # Checks if all struct's fields are initialized. Good in the sense that
    # doing so would make it easier to spot changes to underlying structs.
    # Breaks the "empty struct as default value" convention of Go code. Not
    # meant to be enabled for everything, can be useful in specific cases.
    ## - exhaustruct # DISABLE

    # Flag functions in `golang.org/x/exp` that can be replaced by stdlib ones.
    - exptostd

    # Detects cases of possible context-induced performance issues,
    # https://gabnotes.org/fat-contexts/
    - fatcontext

    # Forbid use of particular identifiers. Most commonly used to disallow use
    # of `println` and `fmt.Print*`. Rationale here is that these are commonly
    # used as debugging tools and as such, should not make their way into the
    # actual commits. A bit of a chore to avoid in cases where we actually
    # _want_ to print to stdout. `fmt.Fprint*` and/or using an appropriate
    # logging package serve as examples of replacements.
    - forbidigo

    # Promotes checking of all type conversions. We shouldn't need to do that
    # much type converting in general (`interface{}` is a bit of a code smell
    # in most cases) but when we do, making sure we got the right type and
    # handling it gracefully beats panicing. This is at odds in some projects
    # that need to follow dependencies' conventions involving `interface{}`
    # passing and their type safety checked by other means. `errcheck`
    # configured with `check-type-assertions: true` makes this redundant.
    ## - forcetypeassert # DISABLE

    # Various checks on order of functions/methods in files.
    - funcorder

    # Limits the size of functions to a maximum number of lines and statements.
    # Difficult to enable later on, as many of the long functions are hard to
    # break up later. By setting a limitation from day 1, it should be easier
    # to avoid writing complex functions that are hard to maintain and
    # test/validate.
    # Similar: cyclomatic complexity and maintainability linters, but this very
    # basic and easy to understand limit is good enough for most cases.
    - funlen

    # Enforce standard ways to use ginkgo and gomega.
    # Not used much with us, but does not hurt.
    - ginkgolinter

    # Guard against whitespace and misspelling issues in compiler directives.
    # Such errors typically cause the directives to be silently ignored.
    - gocheckcompilerdirectives

    # Warns about global variables. Global variables make it hard to follow
    # what happens and add hard to spot side effects to importing. Avoidable
    # in most cases.
    - gochecknoglobals

    # Warns about `init()`s. `init()`s make it hard to follow what happens and
    # add hard to spot side effects to importing, as well as some startup
    # costs. Avoidable in most cases.
    - gochecknoinits

    # Checks exhaustiveness of type switch statements for interfaces
    # annotated to be "sum types".
    - gochecksumtype

    # See `cyclop` for discussion.
    ## - gocognit # DISABLE

    # Promotes making consts out of repeated strings. Eases maintenance,
    # lessens the chance of typo errors and helps with DX as well.
    # Perhaps slightly on the aggressive side for example in tests.
    - goconst

    # Quite an opinionated linter, but has a lot of good suggestions and
    # catches bugs. See `linters.settings` for some more info.
    - gocritic

    # See `cyclop` for discussion.
    ## - gocyclo # DISABLE

    # Quite a minor one, only checks (autofixable) that comments end in a
    # period as the Go code review comments suggest:
    # https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences.
    - godot

    # Warns on comments with TODO, FIXME, etc. These kinds of comments
    # typically get forgotten quickly, only to be discovered by whoever is
    # working on the code next who then has two tasks at hand, instead of the
    # one expected. The rationale here is that these kinds of things should be
    # handled through the same issue management tools as everything else,
    # rather than leaving code comments. Usefulness depends on project
    # lifecycle, can be a chore early on.
    # - godox # OPTIONAL

    # Check file header matches a configured pattern. We don't have a standard
    # one applicable to all projects.
    ## - goheader # DISABLE

    # Ensures that `go.mod` files stay clean. Limits the use of `replace` and
    # `retract` and `exclude` directives in `go.mod`, which are mostly used
    # ad-hoc in development, and obsolete as of Go 1.18's workspaces.
    #
    # NOTE: Disabled due to github.com/hashicorp/packer-plugin-sdk/issues/187
    #- gomoddirectives

    # See discussion in `depguard`.
    ## - gomodguard # DISABLE

    # Checks that printf-style functions have a tailing `f` in their name.
    - goprintffuncname

    # Warns on a lot of different potentially insecure bits of code. There are
    # some case dependent false positives that are not easily avoidable through
    # config, for example related to intentionally relaxed file permissions and
    # `math/rand` vs `crypto/rand`.
    - gosec

    # Flags code smells that may prove to be hindrance to
    # internationalization ("i18n") and/or localization ("l10n").
    - gosmopolitan

    # `go vet` is the 'official' linter, found in stdlib. Seems to do a lot of
    # the same stuff as `staticcheck`, but as both are enabled in golangci-lint
    # by default, and neither is advertized as being a replacement for the
    # other, we keep both enabled as well.
    - govet

    # Do various checks on grouping and arranging `const`s, `var`s, `type`s and
    # `import`s, configurability per mentioned keyword. Partially redundant
    # with `gofumpt`, `decorder` would be a superset of this if we'd like to
    # expand beyond what `gofumpt` does.
    ## - grouper # DISABLE

    # Detect unused, superfluous, and duplicate interfaces, and sanity check
    # interface return values.
    - iface

    ### - ifshort # deprecated

    # Promotes consistent style of import aliasing. Enabled as long as there
    # are some entries to configure, see `linters.settings` for more info.
    - importas

    # Flags interface method declaration parameters lacking a name.
    # Names make use and intent of the parameters more obvious.
    - inamedparam

    # Detects when assignments to existing variables are not used. Can uncover
    # variable shadowing bugs as well. Redundant with `wastedassign`.
    # - ineffassign # DISABLE

    # Check for too many interface members.
    # Go Proverbs: "The bigger the interface, the weaker the abstraction."
    - interfacebloat

    ### - interfacer # deprecated

    # Detects cases that could make use of Go >= 1.22's integer range feature.
    - intrange

    # Implements the return part of the popular "accept abstract types, return
    # concrete types" programming paradigm; essentially, advises not to return
    # interfaces. Although not always that clear cut, returning interfaces
    # tends to require callers to jump through an unneeded layer of indirection
    # hoops.
    # - ireturn # OPTIONAL

    # Report too long lines. Likely calls for discussion before enabling.
    # See also the `golines` formatter.
    ## - lll # DISABLE

    # Check that common logger library function calls have appropriate number
    # of key/value arguments.
    - loggercheck

    # See discussion in `cyclop`.
    ## - maintidx # DISABLE

    # Warns on `make`:ing slices with non-0 length but > 0 capacity, that get
    # appended to shortly afterwards. Essentially, picks up that
    # `slice := make([]int, 1)` (this list would be `[]int{ 0 }` with cap 1)
    # should be `slice := make([]int, 0, 1)` (an empty list with cap 1) if
    # followed by `slice = append(slice, 1)`. This is a classic Go bug at this
    # point as `append` is the common way of adding to a slice and it's easy to
    # forget the initial size from the `make` call by accident.
    - makezero

    # Helps avoid unnecessary conversions between byte arrays and strings.
    - mirror

    # Finds commonly misspelled English words, autofixable. Fixes/suggestions
    # need to be handled with care, as they include occurrences of misspelled
    # words in strings which could have external dependencies, such as APIs.
    - misspell

    # Analyzer to detect magic numbers. Can be useful, but the default config
    # is a tad on the aggressive side, it disallows a lot of bare numbers in
    # cases where using them is just fine. We allow some more in the default
    # config below. See also https://github.com/tommy-muehle/go-mnd/pull/32
    - mnd

    # Require explicit tagging of exported fields in structs passed to
    # Marshal-like functions. Being explicit about them decreases likelihood
    # of inadvertent API breakages, and reduces cognitive load associated with
    # remembering name transformation rules.
    - musttag

    # Forbids final naked returns (eg. named return values and just `return` as
    # the last statement) in long enough (configurable) functions.
    # Naked returns are nice for simple helper methods, but in many cases they
    # can be a bit difficult to follow along and make things more confusing
    # compared to just explicit `return foo, nil`.
    - nakedret

    # Warns on deeply nested if-statements. These are hard to read and follow.
    # Can be a chore to address after the fact, enabling early recommended.
    - nestif

    # Flags returning a `nil` after checking for an error, a fairly common
    # mistake to make with `==` vs `!=`.
    ### - nilerr # redundant with `nilnesserr`

    # Flags various `nil` return related errors.
    - nilnesserr

    # Warns against both return value and error being `nil`, instructs using a
    # sentinel value for the return in non-error conditions. Non-error `nil`
    # return values are unusual and tend to need additional checks or extra
    # care on use. Going against this rule is sometimes necessary due to
    # contracts in implemented interfaces.
    - nilnil

    # Checks for a new line before return and branch statements to increase
    # code clarity. Helps with readability. Rendered redundant by `whitespace`.
    # Similar: `whitespace`, `wsl`
    ## - nlreturn # DISABLE

    # Checks for use of Context in HTTP requests. Contexts should be supported
    # in relevant places, in order to allow for cancellation etc., but more
    # importantly, to make the developer consider the scenario too.
    - noctx

    # Promotes consistent style for `//nolint` directives, requiring them to
    # specify the disabled linter _and_ have a comment, describing why it was
    # disabled in the case at hand. Does very little in its default
    # golangci-lint config, see `linters.settings` for non-defaults we set.
    - nolintlint

    # Similar as `nakedret`, but without the configurability, and triggers
    # on existence rather than use of named return values.
    ## - nonamedreturns # DISABLE

    # Advises to use `net.JoinHostPort` instead of direct `fmt.Sprintf` with
    # separate host and port to construct URLs, for IPv6 compatibility.
    - nosprintfhostport

    # Together with `tparallel', encourages the use of `t.Parallel()` in all
    # tests and catches some common problems with them. Using `t.Parallel()` as
    # much as possible improves confidence in our code being thread-safe and
    # working in parallel, forces the developer to think about parallelism,
    # improves the encapsulation of tests as sharing state typically makes it
    # difficult to run tests in parallel, speeds up running of tests, greatly
    # improving DX. A chore to introduce afterwards, so should be enabled as
    # early as possible.
    - paralleltest

    # Flag usages of `fmt.Sprintf` for which a more performant alternative
    # is available.
    - perfsprint

    # Promotes preallocating slices and maps with a known length. Go grows
    # these on demand, but in clear cases we should help it out as it can have
    # a non-negligible performance benefit. Arguably makes code a little bit
    # more brittle (need to remember to take this into account when
    # refactoring) and a bit less readable (simple default value slices are
    # clearer).
    - prealloc

    # Forbids using names that would shadow
    # [predeclared Go identifiers](https://golang.org/ref/spec#Predeclared_identifiers).
    # While Go allows this, it seems like common sense to not shadow built-in
    # identifiers as that might make some code rather surprising.
    - predeclared

    # Check Prometheus metrics naming via promlint.
    - promlinter

    # Check protobuf field chain accesses susceptible for causing panics.
    - protogetter

    # Warn about reassigning top level variables from another package.
    # Such variables are rarely if ever intended to be reassigned; they tend
    # to be variables instead of constants because of language constraints or
    # for interoperability/idiomacy.
    - reassign

    # Pointer vs non-pointer receiver consistency checks.
    - recvcheck

    # A better (e.g. more rules and faster) version of the original `golint`
    # which has been deprecated.
    # Similar: `stylecheck` (`revive` seems more extensive, `stylecheck` is a
    # sibling project to `staticcheck`).
    - revive

    # Verifies that `sql.Rows` `.Error()` is checked when querying database.
    # Easy to miss but important to do, for example to be aware of connection
    # breakages while iterating results, thus getting only a subset.
    - rowserrcheck

    # Code style consistency checks specific to `log/slog` use.
    - sloglint

    # Checks that `sql.Rows` and `sql.Stmt` are closed properly. Not closing
    # can cause exhaustion of the connection pool and problems.
    - sqlclosecheck

    # Detects incorrect OpenTelemetry span usage patterns.
    - spancheck

    # A lot of different checks, `go vet` on steroids, as described by the
    # author. Encourages some basic good practices, catches some hard to debug
    # problems.
    #- staticcheck #FIXME

    # Aligns and sorts struct tags, for better readability and
    # mainainability.
    - tagalign

    # Checks the struct tags for correct and consistent style.
    # Many struct tags exist for interoperability in possibly third party
    # JSON APIs, which the code needs to abide by no matter consistency or
    # style concerns.
    ## - tagliatelle # DISABLE

    # Checks that examples run by the `testing` package have an applicable
    # "output" comment, so that the example output can be verified to be as
    # expected.
    - testableexamples

    # Code style consistency and readability checks specific to `testify`.
    - testifylint

    # Promotes using test packages (eg. `package foo_test`) in regular tests
    # (files ending with `_test.go`), allows for internal tests (in the same
    # package) only to exist in files ending with `_internal_test.go`.
    # This separation forces the developer to think about the exported
    # interface and how it is used, keeps test packages better separated as
    # it's more difficult (impossible?) to refer to other packages' tests,
    # and makes it harder to accidentally export test-related helpers and mocks
    # that could be confusing. Somewhat chore to address afterwards, so good
    # to enable in as early project lifecycle as possible.
    - testpackage

    # Checks for `t.Helper()` in helper methods. Using `t.Helper()` improves
    # the output of testing and thus gives better information to the developer,
    # improving DX. Helps with some good practices in test functions as well,
    # such as `t *testing.T` as the first parameter.
    - thelper

    # See discussion for `paralleltest`.
    - tparallel

    # Warns on unnecessary type conversions. Unnecessary conversions make code
    # harder to read and can also relay false information to the developer,
    # e.g. assuming that a particular method returns a type that needs to be
    # converted.
    - unconvert

    # Reports unused function parameters. Drawbacks include catching methods
    # in tests that always get called with the same parameters, and checking
    # return values where always returning a `nil` err is required for
    # interface contracts. Poor signal to noise ratio in experiments.
    ## - unparam # DISABLE

    # Checks code for unused constants, variables, functions and types.
    # Removing unused bits is good, as they could easily confuse future
    # development and even cause unnecessary work.
    - unused

    # Endorse use of various consts and variables defined in stdlib.
    - usestdlibvars

    # Endorse use of functions available in the stdlib `testing` package.
    - usetesting

    # Variable name length checks, takes definition and use span lengths into
    # account. Nice idea, idiomatic Go, but needs discussion if we want to go
    # with their defaults which cause a lot of errors in various existing
    # codebases, or if we want to refine what our default limits would be.
    # - varnamelen # OPTIONAL

    # Warns on assignments that are never read or are overwritten before
    # reading. This helps with readability of the code as it's not always so
    # clear where the actual value comes from, especially if it's overwritten
    # in assignments. Might also prevent some bugs where a value gets
    # overwritten by accident. Detects more cases than `ineffassign`, and
    # gives better explanations.
    # Similar: `ineffassign`
    - wastedassign

    # Checks for whitespace/empty lines around blocks, autofixable. Does
    # generally enough without being too overbearing.
    # Similar: `wsl` (more aggressive, not autofixable (?)), `nlreturn`
    # (also not seem to be autofixable (?), at least through golangci-lint).
    - whitespace

    # Checks that errors returned originating from external packages are
    # wrapped. The most important facet of wrapping errors is to provide
    # context for figuring out where an error actually occurred.
    # - wrapcheck

    # A whitespace linter that is quite aggressive, causing a lot of changes
    # in typical codebases. `whitespace` is the generally preferred choice
    # over this.
    ## - wsl # DISABLE

    # Detects incorrect zerolog usage patterns.
    - zerologlint

  settings:
    depguard:
      rules:
        main:
          deny:
            - pkg: "github.com/pkg/errors"
              desc: "use stdlib instead"
            - pkg: "unsafe"
              desc: "verify if using unsafe is *really* required"

    errcheck:
      # See discussion in `forcetypeassert`.
      check-type-assertions: true

    forbidigo:
      forbid:
        - pattern: '^(fmt\.Print(|f|ln)|print|println)$' # default repeated
        - pattern: '^tls\.(Load)?X509KeyPair$'
          msg: Dangerously lax for many use cases, misleading name.

    funcorder:
      struct-method: false # Debatable/to be discussed if we should enable this

    gocritic:
      disabled-checks:
        # commentFormatting is redundant with/inferior to gofumpt which can also
        # autofix this.
        - commentFormatting
        # hugeParam, range*Copy (from performance tag) to be discussed, arguably
        # promote unconventional code.
        - hugeParam
        - rangeValCopy
        - rangeExprCopy
      enabled-tags:
        # Most performance checks also encourage clean/idiomatic code.
        - performance
      settings:
        captLocal:
          paramsOnly: false

    importas:
      no-unaliased: true
      alias:
        # Prominently differentiate pkg/errors and stdlib errors.
        - pkg: github.com/pkg/errors
          alias: pkgerrors

    loggercheck:
      no-printf-like: true
      require-string-key: true
      rules:
        - (github.com/gemalto/flume.Logger).Debug
        - (github.com/gemalto/flume.Logger).Error
        - (github.com/gemalto/flume.Logger).Info
        - (github.com/gemalto/flume.Logger).With
        - (github.com/gemalto/flume.Logger).WithArgs

    mnd:
      ignored-functions:
        # https://github.com/tommy-muehle/go-mnd/pull/32
        - ^os\.(Chmod|Mkdir(All)?|OpenFile|WriteFile)$
        - ^time\.Date$
        - ^strconv\.(Format|Parse)(Int|Uint|Float|Complex)$
        - ^strings\.Split(After)?N$

    nolintlint:
      require-explanation: true
      require-specific: true

    perfsprint:
      # fmt.Sprintf tends to be more readable than string concatenation.
      strconcat: false

    reassign:
      patterns:
        - ".*"

    revive:
      rules:
        - name: var-naming
          arguments:
            - []
            - [
                "ACME",
                "AMQP",
                "BGP",
                "CA",
                "CIDR",
                "CN",
                "CSV",
                "DB",
                "DCMI",
                "DHCP",
                "DN",
                "DSA",
                "ECDSA",
                "EMA",
                "EVI",
                "EVPN",
                "FIFO",
                "FRU",
                "GID",
                "GPU",
                "IB",
                "IOPS",
                "IPMI",
                "JWT",
                "KV",
                "LAN",
                "LFU",
                "LIFO",
                "LRU",
                "MAC",
                "MS",
                "NIC",
                "PDF",
                "PKI",
                "PSU",
                "PTR",
                "REST",
                "RSA",
                "RTP",
                "RX",
                "SCSI",
                "SDN",
                "SHA",
                "SIP",
                "SPOE",
                "SSD",
                "TS",
                "TSIG",
                "TSV",
                "TTL",
                "TX",
                "TXN",
                "ULID",
                "VAT",
                "VCPU",
                "VIP",
                "VLAN",
                "VRF",
              ]

    rowserrcheck:
      packages:
        - github.com/jackc/pgx/v4
        - github.com/jackc/pgx/v5

    testifylint:
      disable:
        # The goal of `require-error` is good, but it's prone to produce quite
        # a few false positives as of golangci-lint 1.56.1.
        - require-error # OPTIONAL

  exclusions:
    rules:
      - path: _test\.go
        linters:
          # Test functions can easily grow quite large and don't/can't really
          # be shortened
          - funlen
          # Enforcing context in tests clutters up the code and isn't really
          # necessary
          - noctx
          # Closing response bodies in tests clutters up the code and isn't
          # really necessary
          - bodyclose
      # We used to have a mixture of initialisms and non-initialisms between
      # and even within projects, but are converging towards the initialisms
      # practice that is the most common one with Go code in general.
      # Note that changing the naming is a breaking change, and
      # whether/when/how to do it depends on the case at hand.
      #- linters:
      #    - revive
      #  text: "^var-naming: .+ should be " # OPTIONAL, if needed

issues:
  # Disable per linter/same-issue limits, again to get the whole picture on
  # first pass.
  max-issues-per-linter: 0
  max-same-issues: 0
  # Get all issues from all linters, instead of just first per line, so we
  # get to see everything on first pass.
  uniq-by-line: false
  # Fix found issues where supported, because life is too short. Be sure to
  # sanity check the diffs.
  fix: true
